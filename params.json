{
  "name": "transvolve.js",
  "tagline": "The ECS engine that you can react to.",
  "body": "[![NPM Version](https://badge.fury.io/js/transvolve.svg)](https://npmjs.org/packages/transvolve) [![Build Status](https://travis-ci.org/joechimo/transvolve.svg?branch=master)](https://travis-ci.org/joechimo/transvolve) [![Coverage Status](https://coveralls.io/repos/github/joechimo/transvolve/badge.svg?branch=master)](https://coveralls.io/github/joechimo/transvolve)\r\n\r\n## Getting Started\r\n\r\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.\r\n\r\n### Installing\r\n\r\nGetting all set up is easy.\r\n\r\nFirst, install the npm package to you project.\r\n\r\n```\r\nnpm install transvolve\r\n```\r\n\r\nThen, go ahead and import it into your code and run.\r\n\r\n```\r\nimport { Engine } from 'transvolve';\r\n\r\nconst engine = new Engine();\r\n```\r\n\r\nTake a gander at the [transvolve.js](https://joechimo.github.io/transvolve/) GitHub Page and the [API Documentation](https://joechimo.github.io/transvolve/docs/).\r\n\r\n## Running the tests\r\n\r\nTest can be ran using:\r\n\r\n```\r\nnpm run test\r\n```\r\n\r\n## Example code that demonstrates the engine\r\n\r\n```\r\n   var transvolve = require('transvolve');\r\n   var Engine = transvolve.Engine;\r\n   var System = transvolve.System;\r\n   var Entity = transvolve.Entity;\r\n   var Component = transvolve.Component;\r\n   \r\n   function random(min, max) {\r\n     var MIN = Math.ceil(min);\r\n     var MAX = Math.floor(max);\r\n     return Math.floor(Math.random() * (MAX - MIN)) + MIN;\r\n   }\r\n   \r\n   var engine = new Engine();\r\n   \r\n   function onTick() {\r\n     var entity = new Entity();\r\n     var healthComponent = new Component('health', { hp: 100 });\r\n     var decayComponent = new Component('decay');\r\n   \r\n     entity.addComponents(healthComponent, decayComponent);\r\n     engine.addEntities(entity);\r\n   }\r\n   \r\n   var decaySystem = new System({\r\n     name: 'decay',\r\n     requirements: ['decay'],\r\n     interval: 100,\r\n     executor: (context) => {\r\n       var entity = context.entity;\r\n   \r\n       var timer = entity.getComponents('decay').getState('timer');\r\n       timer = timer - context.time.delta;\r\n   \r\n       if (timer > 0) {\r\n         entity.getComponents('decay').setState('timer', timer);\r\n       } else {\r\n         var hp = entity.getComponents('health').getState('hp');\r\n         var loss = random(0, 100);\r\n   \r\n         hp = (hp - loss) > 0 ? hp - loss : 0;\r\n         entity.getComponents('health').setState('hp', hp);\r\n   \r\n         if (hp === 0) {\r\n           if (random(0, 100) >= 50) {\r\n             entity.removeComponents('decay');\r\n             entity.addComponents(new Component('death', { timer: 5000 }));\r\n             console.log(entity.getId() + ' has perished.');\r\n           } else {\r\n             entity.dispose();\r\n           }\r\n         } else {\r\n           entity.getComponents('decay').setState('timer', 1000);\r\n         }\r\n       }\r\n     },\r\n   });\r\n   \r\n   var resurrectSystem = new System({\r\n     name: 'resurrect',\r\n     requirements: ['death'],\r\n     interval: 1000,\r\n     executor: (context) => {\r\n       var entity = context.entity;\r\n       var timer = entity.getComponents('death').getState('timer');\r\n       timer = timer - context.time.delta;\r\n   \r\n       if (timer <= 0) {\r\n         entity.removeComponents('death');\r\n         entity.getComponents('health').setState('hp', 100);\r\n         entity.addComponents(new Component('decay', { timer: 1000 }));\r\n         console.log(entity.getId() + ' has revived.');\r\n       } else {\r\n         entity.getComponents('death').setState('timer', timer);\r\n       }\r\n     },\r\n   });\r\n   \r\n   engine.addSystems(decaySystem, resurrectSystem);\r\n   engine.subscribe('tick', onTick);\r\n   \r\n   engine.init()\r\n     .then(() => {\r\n       engine.start();\r\n     });\r\n```\r\n\r\n## Contributing\r\n\r\nPlease read [CONTRIBUTING.md](https://gist.github.com/PurpleBooth/b24679402957c63ec426) for details on our code of conduct, and the process for submitting pull requests to us.\r\n\r\n## Versioning\r\n\r\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/joechimo/transvolve/tags). \r\n\r\n## Authors\r\n\r\n* **Joe Cimaszewski** - *Initial work* - [joechimo](https://github.com/joechimo)\r\n\r\nSee also the list of [contributors](https://github.com/joechimo/transvolve/contributors) who participated in this project.\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\r\n\r\n## Acknowledgments\r\n\r\n* Just me, right now.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}